diff --git a/node_modules/readable-stream/lib/_stream_readable.js b/node_modules/readable-stream/lib/_stream_readable.js
index 3af95cb..08f9ae2 100644
--- a/node_modules/readable-stream/lib/_stream_readable.js
+++ b/node_modules/readable-stream/lib/_stream_readable.js
@@ -53,7 +53,7 @@ var Stream = require('./internal/streams/stream');
 /*<replacement>*/
 
 var Buffer = require('safe-buffer').Buffer;
-var OurUint8Array = (typeof global !== 'undefined' ? global : typeof window !== 'undefined' ? window : typeof self !== 'undefined' ? self : {}).Uint8Array || function () {};
+var OurUint8Array = (typeof global !== 'undefined' ? global : typeof window !== 'undefined' ? window : typeof self !== 'undefined' ? self : {}).Uint8Array || function () { };
 function _uint8ArrayToBuffer(chunk) {
   return Buffer.from(chunk);
 }
@@ -74,7 +74,7 @@ var debug = void 0;
 if (debugUtil && debugUtil.debuglog) {
   debug = debugUtil.debuglog('stream');
 } else {
-  debug = function () {};
+  debug = function () { };
 }
 /*</replacement>*/
 
@@ -95,7 +95,7 @@ function prependListener(emitter, event, fn) {
   // userland ones.  NEVER DO THIS. This is here only because this code needs
   // to continue to work with older versions of Node.js that do not include
   // the prependListener() method. The goal is to eventually remove this hack.
-  if (!emitter._events || !emitter._events[event]) emitter.on(event, fn);else if (isArray(emitter._events[event])) emitter._events[event].unshift(fn);else emitter._events[event] = [fn, emitter._events[event]];
+  if (!emitter._events || !emitter._events[event]) emitter.on(event, fn); else if (isArray(emitter._events[event])) emitter._events[event].unshift(fn); else emitter._events[event] = [fn, emitter._events[event]];
 }
 
 function ReadableState(options, stream) {
@@ -122,7 +122,7 @@ function ReadableState(options, stream) {
   var readableHwm = options.readableHighWaterMark;
   var defaultHwm = this.objectMode ? 16 : 16 * 1024;
 
-  if (hwm || hwm === 0) this.highWaterMark = hwm;else if (isDuplex && (readableHwm || readableHwm === 0)) this.highWaterMark = readableHwm;else this.highWaterMark = defaultHwm;
+  if (hwm || hwm === 0) this.highWaterMark = hwm; else if (isDuplex && (readableHwm || readableHwm === 0)) this.highWaterMark = readableHwm; else this.highWaterMark = defaultHwm;
 
   // cast to ints.
   this.highWaterMark = Math.floor(this.highWaterMark);
@@ -169,7 +169,7 @@ function ReadableState(options, stream) {
   this.decoder = null;
   this.encoding = null;
   if (options.encoding) {
-    if (!StringDecoder) StringDecoder = require('string_decoder/').StringDecoder;
+    if (!StringDecoder) StringDecoder = require('string_decoder').StringDecoder;
     this.decoder = new StringDecoder(options.encoding);
     this.encoding = options.encoding;
   }
@@ -266,14 +266,14 @@ function readableAddChunk(stream, chunk, encoding, addToFront, skipChunkCheck) {
       }
 
       if (addToFront) {
-        if (state.endEmitted) stream.emit('error', new Error('stream.unshift() after end event'));else addChunk(stream, state, chunk, true);
+        if (state.endEmitted) stream.emit('error', new Error('stream.unshift() after end event')); else addChunk(stream, state, chunk, true);
       } else if (state.ended) {
         stream.emit('error', new Error('stream.push() after EOF'));
       } else {
         state.reading = false;
         if (state.decoder && !encoding) {
           chunk = state.decoder.write(chunk);
-          if (state.objectMode || chunk.length !== 0) addChunk(stream, state, chunk, false);else maybeReadMore(stream, state);
+          if (state.objectMode || chunk.length !== 0) addChunk(stream, state, chunk, false); else maybeReadMore(stream, state);
         } else {
           addChunk(stream, state, chunk, false);
         }
@@ -293,7 +293,7 @@ function addChunk(stream, state, chunk, addToFront) {
   } else {
     // update the buffer info.
     state.length += state.objectMode ? 1 : chunk.length;
-    if (addToFront) state.buffer.unshift(chunk);else state.buffer.push(chunk);
+    if (addToFront) state.buffer.unshift(chunk); else state.buffer.push(chunk);
 
     if (state.needReadable) emitReadable(stream);
   }
@@ -325,7 +325,7 @@ Readable.prototype.isPaused = function () {
 
 // backwards compatibility.
 Readable.prototype.setEncoding = function (enc) {
-  if (!StringDecoder) StringDecoder = require('string_decoder/').StringDecoder;
+  if (!StringDecoder) StringDecoder = require('string_decoder').StringDecoder;
   this._readableState.decoder = new StringDecoder(enc);
   this._readableState.encoding = enc;
   return this;
@@ -357,7 +357,7 @@ function howMuchToRead(n, state) {
   if (state.objectMode) return 1;
   if (n !== n) {
     // Only flow one buffer at a time
-    if (state.flowing && state.length) return state.buffer.head.data.length;else return state.length;
+    if (state.flowing && state.length) return state.buffer.head.data.length; else return state.length;
   }
   // If we're asking for more than the current hwm, then raise the hwm.
   if (n > state.highWaterMark) state.highWaterMark = computeNewHighWaterMark(n);
@@ -384,7 +384,7 @@ Readable.prototype.read = function (n) {
   // the 'readable' event and move on.
   if (n === 0 && state.needReadable && (state.length >= state.highWaterMark || state.ended)) {
     debug('read: emitReadable', state.length, state.ended);
-    if (state.length === 0 && state.ended) endReadable(this);else emitReadable(this);
+    if (state.length === 0 && state.ended) endReadable(this); else emitReadable(this);
     return null;
   }
 
@@ -448,7 +448,7 @@ Readable.prototype.read = function (n) {
   }
 
   var ret;
-  if (n > 0) ret = fromList(n, state);else ret = null;
+  if (n > 0) ret = fromList(n, state); else ret = null;
 
   if (ret === null) {
     state.needReadable = true;
@@ -495,7 +495,7 @@ function emitReadable(stream) {
   if (!state.emittedReadable) {
     debug('emitReadable', state.flowing);
     state.emittedReadable = true;
-    if (state.sync) pna.nextTick(emitReadable_, stream);else emitReadable_(stream);
+    if (state.sync) pna.nextTick(emitReadable_, stream); else emitReadable_(stream);
   }
 }
 
@@ -525,7 +525,7 @@ function maybeReadMore_(stream, state) {
     stream.read(0);
     if (len === state.length)
       // didn't get any data, stop spinning.
-      break;else len = state.length;
+      break; else len = state.length;
   }
   state.readingMore = false;
 }
@@ -559,7 +559,7 @@ Readable.prototype.pipe = function (dest, pipeOpts) {
   var doEnd = (!pipeOpts || pipeOpts.end !== false) && dest !== process.stdout && dest !== process.stderr;
 
   var endFn = doEnd ? onend : unpipe;
-  if (state.endEmitted) pna.nextTick(endFn);else src.once('end', endFn);
+  if (state.endEmitted) pna.nextTick(endFn); else src.once('end', endFn);
 
   dest.on('unpipe', onunpipe);
   function onunpipe(readable, unpipeInfo) {
@@ -719,7 +719,7 @@ Readable.prototype.unpipe = function (dest) {
 
     for (var i = 0; i < len; i++) {
       dests[i].emit('unpipe', this, { hasUnpiped: false });
-    }return this;
+    } return this;
   }
 
   // try to find the right one.
@@ -810,7 +810,7 @@ Readable.prototype.pause = function () {
 function flow(stream) {
   var state = stream._readableState;
   debug('flow', state.flowing);
-  while (state.flowing && stream.read() !== null) {}
+  while (state.flowing && stream.read() !== null) { }
 }
 
 // wrap an old-style stream as the async data source.
@@ -837,7 +837,7 @@ Readable.prototype.wrap = function (stream) {
     if (state.decoder) chunk = state.decoder.write(chunk);
 
     // don't skip over falsy values in objectMode
-    if (state.objectMode && (chunk === null || chunk === undefined)) return;else if (!state.objectMode && (!chunk || !chunk.length)) return;
+    if (state.objectMode && (chunk === null || chunk === undefined)) return; else if (!state.objectMode && (!chunk || !chunk.length)) return;
 
     var ret = _this.push(chunk);
     if (!ret) {
@@ -898,9 +898,9 @@ function fromList(n, state) {
   if (state.length === 0) return null;
 
   var ret;
-  if (state.objectMode) ret = state.buffer.shift();else if (!n || n >= state.length) {
+  if (state.objectMode) ret = state.buffer.shift(); else if (!n || n >= state.length) {
     // read it all, truncate the list
-    if (state.decoder) ret = state.buffer.join('');else if (state.buffer.length === 1) ret = state.buffer.head.data;else ret = state.buffer.concat(state.length);
+    if (state.decoder) ret = state.buffer.join(''); else if (state.buffer.length === 1) ret = state.buffer.head.data; else ret = state.buffer.concat(state.length);
     state.buffer.clear();
   } else {
     // read part of list
@@ -941,12 +941,12 @@ function copyFromBufferString(n, list) {
   while (p = p.next) {
     var str = p.data;
     var nb = n > str.length ? str.length : n;
-    if (nb === str.length) ret += str;else ret += str.slice(0, n);
+    if (nb === str.length) ret += str; else ret += str.slice(0, n);
     n -= nb;
     if (n === 0) {
       if (nb === str.length) {
         ++c;
-        if (p.next) list.head = p.next;else list.head = list.tail = null;
+        if (p.next) list.head = p.next; else list.head = list.tail = null;
       } else {
         list.head = p;
         p.data = str.slice(nb);
@@ -976,7 +976,7 @@ function copyFromBuffer(n, list) {
     if (n === 0) {
       if (nb === buf.length) {
         ++c;
-        if (p.next) list.head = p.next;else list.head = list.tail = null;
+        if (p.next) list.head = p.next; else list.head = list.tail = null;
       } else {
         list.head = p;
         p.data = buf.slice(nb);
